name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run verify

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test:unit
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run database migrations
        run: node scripts/migrate.js
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
      - name: Start services in background
        run: |
          docker-compose -f docker-compose.dev.yml up -d orchestrator market-analyst risk-manager trade-executor
        env:
          REDIS_URL: redis://localhost:6379/0
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
      - name: Wait for services to be ready
        run: |
          # Wait for services to be ready
          for i in {1..30}; do
            if curl -s http://localhost:7001/health | grep -q "ok"; then
              echo "Orchestrator is ready"
              break
            fi
            echo "Waiting for orchestrator to be ready... ($i/30)"
            sleep 2
          done
      - name: Print integration env and list integration-jest tests (discovery-check)
        run: |
          echo "RUN_DOCKER_TESTS=${RUN_DOCKER_TESTS}"
          echo "ORCH_URL=${ORCH_URL}"
          echo "REDIS_URL=${REDIS_URL}"
          echo "Listing tests under tests/integration-jest/ using jest.config.js"
          npx jest --config=jest.config.js --testPathPattern=tests/integration-jest/ --listTests || true
        env:
          RUN_DOCKER_TESTS: 'true'
          REDIS_URL: redis://localhost:6379/0
          ORCH_URL: http://localhost:7001
      - name: Run integration tests (node-runner)
        run: npm run test:integration
        env:
          REDIS_URL: redis://localhost:6379/0
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          ORCH_URL: http://localhost:7001
      - name: Run integration tests (Jest wrappers)
        run: npm run test:integration:docker
        env:
          RUN_DOCKER_TESTS: 'true'
          REDIS_URL: redis://localhost:6379/0
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          ORCH_URL: http://localhost:7001

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Start full system
        run: docker-compose -f docker-compose.dev.yml up -d
      - name: Wait for system to be ready
        run: |
          # Wait for services to be ready
          for i in {1..60}; do
            if curl -s http://localhost:7001/health | grep -q "ok"; then
              echo "System is ready"
              break
            fi
            echo "Waiting for system to be ready... ($i/60)"
            sleep 2
          done
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          ORCH_URL: http://localhost:7001

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Start full system
        run: docker-compose -f docker-compose.dev.yml up -d
      - name: Wait for system to be ready
        run: |
          # Wait for services to be ready
          for i in {1..60}; do
            if curl -s http://localhost:7001/health | grep -q "ok"; then
              echo "System is ready"
              break
            fi
            echo "Waiting for system to be ready... ($i/60)"
            sleep 2
          done
      - name: Run performance tests
        run: node tests/performance/load-test.js
        env:
          ORCH_URL: http://localhost:7001
          TEST_DURATION_SEC: 30
          REQUESTS_PER_SEC: 2
          CONCURRENT_USERS: 5
