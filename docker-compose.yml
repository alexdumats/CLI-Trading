services:
  traefik:
    image: traefik:v2.11
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --api.dashboard=true
      - --api.insecure=false
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls.certresolver=le
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}
      - traefik.http.middlewares.traefik-allow.ipwhitelist.sourcerange=${TRAEFIK_ALLOWED_CIDRS}
      - traefik.http.routers.traefik.middlewares=traefik-auth,traefik-allow
    networks: [public]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis-data:/data
    networks: [backend]
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  orchestrator:
    build: ./agents/orchestrator
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Orchestrator
      - PORT=7001
      - REDIS_URL=${REDIS_URL}
      - COMM_MODE=${COMM_MODE}
      - START_EQUITY=${START_EQUITY}
      - DAILY_TARGET_PCT=${DAILY_TARGET_PCT}
      - MARKET_ANALYST_URL=http://market-analyst:7003
      - RISK_MANAGER_URL=http://risk-manager:7004
      - TRADE_EXECUTOR_URL=http://trade-executor:7005
      - NOTIFICATION_MANAGER_URL=http://notification-manager:7006
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - ADMIN_TOKEN_FILE=/run/secrets/admin_token
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=${POSTGRES_DB}
    secrets:
      - admin_token
      - postgres_password
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.oauth2-forwardauth.forwardauth.address=http://oauth2-proxy:4180/oauth2/auth
      - traefik.http.middlewares.oauth2-forwardauth.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.oauth2-forwardauth.forwardauth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email
      - traefik.http.middlewares.orch-rl.ratelimit.average=${ORCH_RL_AVG}
      - traefik.http.middlewares.orch-rl.ratelimit.burst=${ORCH_RL_BURST}
      - traefik.http.middlewares.orch-https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.orch.rule=Host(`${ORCH_DOMAIN}`) && PathPrefix(`/`)
      - traefik.http.routers.orch.entrypoints=websecure
      - traefik.http.routers.orch.tls.certresolver=le
      - traefik.http.routers.orch.middlewares=oauth2-forwardauth,orch-rl
      - traefik.http.routers.orch-http.rule=Host(`${ORCH_DOMAIN}`)
      - traefik.http.routers.orch-http.entrypoints=web
      - traefik.http.routers.orch-http.middlewares=orch-https-redirect
      - traefik.http.routers.orch-admin.rule=Host(`${ORCH_DOMAIN}`) && PathPrefix(`/admin/`)
      - traefik.http.routers.orch-admin.entrypoints=websecure
      - traefik.http.routers.orch-admin.tls.certresolver=le
      - traefik.http.routers.orch-admin.tls.options=mtls@file
      - traefik.http.routers.orch-admin.middlewares=oauth2-forwardauth,orch-rl
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7001/health || exit 1']
      interval: 5s
      timeout: 3s
      retries: 20
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend, public]

  portfolio-manager:
    build: ./agents/portfolio-manager
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Portfolio Manager
      - PORT=7002
      - REDIS_URL=${REDIS_URL}
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7002/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  market-analyst:
    build: ./agents/market-analyst
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Market Analyst
      - PORT=7003
      - REDIS_URL=${REDIS_URL}
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7003/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  risk-manager:
    build: ./agents/risk-manager
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Risk Manager
      - PORT=7004
      - REDIS_URL=${REDIS_URL}
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7004/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  trade-executor:
    build: ./agents/trade-executor
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Trade Executor
      - PORT=7005
      - REDIS_URL=${REDIS_URL}
      - PROFIT_PER_TRADE=${PROFIT_PER_TRADE}
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7005/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  notification-manager:
    build: ./agents/notification-manager
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Notification Manager
      - PORT=7006
      - REDIS_URL=${REDIS_URL}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SLACK_WEBHOOK_URL_INFO=${SLACK_WEBHOOK_URL_INFO}
      - SLACK_WEBHOOK_URL_WARNING=${SLACK_WEBHOOK_URL_WARNING}
      - SLACK_WEBHOOK_URL_CRITICAL=${SLACK_WEBHOOK_URL_CRITICAL}
      - SLACK_WEBHOOK_URL_FILE=/run/secrets/slack_webhook_url
      - SLACK_WEBHOOK_URL_INFO_FILE=/run/secrets/slack_webhook_url_info
      - SLACK_WEBHOOK_URL_WARNING_FILE=/run/secrets/slack_webhook_url_warning
      - SLACK_WEBHOOK_URL_CRITICAL_FILE=/run/secrets/slack_webhook_url_critical
      - GRAFANA_URL=${GRAFANA_URL}
      - PROM_URL=${PROM_URL}
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - ADMIN_TOKEN_FILE=/run/secrets/admin_token
    secrets:
      - admin_token
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7006/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  integrations-broker:
    build: ./agents/integrations-broker
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Integrations Broker
      - PORT=7010
      - REDIS_URL=${REDIS_URL}
      - ENABLE_JIRA=${ENABLE_JIRA}
      - ENABLE_NOTION=${ENABLE_NOTION}
      - JIRA_BASE_URL=${JIRA_BASE_URL}
      - JIRA_EMAIL=${JIRA_EMAIL}
      - JIRA_API_TOKEN_FILE=/run/secrets/jira_api_token
      - JIRA_PROJECT_KEY=${JIRA_PROJECT_KEY}
      - JIRA_ISSUE_TYPE=${JIRA_ISSUE_TYPE}
      - NOTION_API_TOKEN_FILE=/run/secrets/notion_api_token
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}
    secrets:
      - jira_api_token
      - notion_api_token
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7010/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          memory: 64M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  slack-mcp:
    image: ghcr.io/korotovsky/slack-mcp-server:latest
    environment:
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_BOT_TOKEN_FILE=/run/secrets/slack_bot_token
      - SLACK_SIGNING_SECRET_FILE=/run/secrets/slack_signing_secret
    secrets:
      - slack_bot_token
      - slack_signing_secret
    networks: [backend]
    restart: unless-stopped

  rovo-dev-hub:
    build: ./agents/rovo-dev-hub
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Rovo Dev Hub
      - PORT=7010
      - REDIS_URL=${REDIS_URL}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Agent URLs for communication
      - ORCHESTRATOR_URL=http://orchestrator:7001
      - MARKET_ANALYST_URL=http://market-analyst:7003
      - RISK_MANAGER_URL=http://risk-manager:7004
      - TRADE_EXECUTOR_URL=http://trade-executor:7005
      - NOTIFICATION_MANAGER_URL=http://notification-manager:7006
      - PARAMETER_OPTIMIZER_URL=http://parameter-optimizer:7007
      - MCP_HUB_CONTROLLER_URL=http://mcp-hub-controller:7008
      - PORTFOLIO_MANAGER_URL=http://portfolio-manager:7002
      - INTEGRATIONS_BROKER_URL=http://integrations-broker:7009
    ports:
      - '7010:7010'
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7010/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend, public]

  parameter-optimizer:
    build: ./agents/parameter-optimizer
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude Parameter Optimizer
      - PORT=7007
      - REDIS_URL=${REDIS_URL}
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7007/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  mcp-hub-controller:
    build: ./agents/mcp-hub-controller
    read_only: true
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=64m
      - /run:rw,noexec,nosuid,size=16m
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVICE_NAME=Claude MCP Hub Controller
      - PORT=7008
      - REDIS_URL=${REDIS_URL}
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:7008/health || exit 1']
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=${POSTGRES_DB}
    secrets:
      - postgres_password
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
      interval: 5s
      timeout: 3s
      retries: 20
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          memory: 512M
    networks: [backend]

  migrator:
    image: node:20-alpine
    working_dir: /workspace
    command: ['node', 'scripts/migrate.js']
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./:/workspace:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks: [backend]

  redis-exporter:
    image: oliver006/redis_exporter:v1.63.0
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks: [backend]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          memory: 64M

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    command:
      [
        '/bin/sh',
        '-c',
        'DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:$(cat /run/secrets/postgres_password)@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable exec postgres_exporter',
      ]
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
    secrets:
      - postgres_password
    depends_on:
      postgres:
        condition: service_healthy
    networks: [backend]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          memory: 64M

  loki:
    image: grafana/loki:2.9.4
    command: ['-config.file=/etc/loki/loki-config.yml']
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki-data:/loki
    networks: [backend]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M

  promtail:
    image: grafana/promtail:2.9.4
    command: ['-config.file=/etc/promtail/config.yml']
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks: [backend]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    command: ['--config.file=/etc/prometheus/prometheus.yml', '--storage.tsdb.path=/prometheus']
    depends_on:
      alertmanager:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          memory: 256M
    labels:
      - traefik.enable=true
      - traefik.http.routers.prom.rule=Host(`${PROM_DOMAIN}`)
      - traefik.http.routers.prom.entrypoints=websecure
      - traefik.http.routers.prom.tls.certresolver=le
      - traefik.http.middlewares.prom-https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.prom-http.rule=Host(`${PROM_DOMAIN}`)
      - traefik.http.routers.prom-http.entrypoints=web
      - traefik.http.routers.prom-http.middlewares=prom-https-redirect
      - traefik.http.middlewares.prom-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}
      - traefik.http.middlewares.prom-allow.ipwhitelist.sourcerange=${TRAEFIK_ALLOWED_CIDRS}
      - traefik.http.routers.prom.middlewares=prom-auth,prom-allow
    networks: [backend, public]

  alertmanager:
    image: prom/alertmanager:latest
    restart: unless-stopped
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      [
        '--config.file=/etc/alertmanager/alertmanager.yml',
        '--storage.path=/alertmanager',
        '--config.expand-env=true',
      ]
    environment:
      - ALERT_SLACK_WEBHOOK_URL=${ALERT_SLACK_WEBHOOK_URL}
      - ALERT_SLACK_CHANNEL=${ALERT_SLACK_CHANNEL}
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    networks: [backend]

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - ./grafana/provisioning/loki:/etc/grafana/provisioning/loki:ro
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - traefik.enable=true
      - traefik.http.routers.graf.rule=Host(`${GRAFANA_DOMAIN}`)
      - traefik.http.routers.graf.entrypoints=websecure
      - traefik.http.routers.graf.tls.certresolver=le
      - traefik.http.middlewares.graf-https-redirect.redirectscheme.scheme=https
      - traefik.http.routers.graf-http.rule=Host(`${GRAFANA_DOMAIN}`)
      - traefik.http.routers.graf-http.entrypoints=web
      - traefik.http.routers.graf-http.middlewares=graf-https-redirect
      - traefik.http.middlewares.graf-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}
      - traefik.http.middlewares.graf-allow.ipwhitelist.sourcerange=${TRAEFIK_ALLOWED_CIDRS}
      - traefik.http.routers.graf.middlewares=graf-auth,graf-allow
    networks: [backend, public]

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    restart: unless-stopped
    environment:
      - OAUTH2_PROXY_PROVIDER=${OAUTH2_PROXY_PROVIDER}
      # Client ID/Secret/Cookie Secret loaded from Docker secrets via load_secrets.sh
      - OAUTH2_PROXY_EMAIL_DOMAINS=${OAUTH2_PROXY_EMAIL_DOMAINS}
      - OAUTH2_PROXY_ALLOWED_EMAILS=${OAUTH2_PROXY_ALLOWED_EMAILS}
      - OAUTH2_PROXY_REDIRECT_URL=${OAUTH2_PROXY_REDIRECT_URL}
      - OAUTH2_PROXY_UPSTREAMS=static://200
      - OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:4180
    command: ['/bin/sh', '-c', '. /etc/oauth2-proxy/load_secrets.sh']
    volumes:
      - ./oauth2-proxy/load_secrets.sh:/etc/oauth2-proxy/load_secrets.sh:ro
    secrets:
      - oauth2_client_id
      - oauth2_client_secret
      - oauth2_cookie_secret
    networks: [backend]

  tests:
    image: node:20-alpine
    working_dir: /workspace
    command: ['node', 'tests/integration/run_all.js']
    environment:
      - ORCH_URL=http://orchestrator:7001
      - ADMIN_TOKEN=${ADMIN_TOKEN}
    volumes:
      - ./:/workspace:ro
    depends_on:
      orchestrator:
        condition: service_healthy
    networks: [backend]

networks:
  backend:
    driver: bridge
  public:
    driver: bridge

volumes:
  redis-data:
  grafana-storage:
  traefik-letsencrypt:
  loki-data:
  pg-data:

secrets:
  admin_token:
    file: ./secrets/admin_token
  postgres_password:
    file: ./secrets/postgres_password
  slack_bot_token:
    file: ./secrets/slack_bot_token
  slack_signing_secret:
    file: ./secrets/slack_signing_secret
  slack_webhook_url:
    file: ./secrets/slack_webhook_url
  slack_webhook_url_info:
    file: ./secrets/slack_webhook_url_info
  slack_webhook_url_warning:
    file: ./secrets/slack_webhook_url_warning
  slack_webhook_url_critical:
    file: ./secrets/slack_webhook_url_critical
  oauth2_client_id:
    file: ./secrets/oauth2_client_id
  oauth2_client_secret:
    file: ./secrets/oauth2_client_secret
  oauth2_cookie_secret:
    file: ./secrets/oauth2_cookie_secret
  jira_api_token:
    file: ./secrets/jira_api_token
  notion_api_token:
    file: ./secrets/notion_api_token
